// Generated by CoffeeScript 1.6.3
var app, board, hashAppend, hashList, hashLoad, hashRemove, hashToggle, updateImages,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

board = document.querySelector('.board');

updateImages = function() {
  return setTimeout((function() {
    var image, _i, _len, _ref, _results;
    _ref = document.querySelectorAll('.js-img');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      image = _ref[_i];
      if (image.getBoundingClientRect().top < window.innerHeight * 2 && !image.style.backgroundImage) {
        _results.push(image.style.backgroundImage = 'url(' + image.dataset.src + ')');
      }
    }
    return _results;
  }), 0);
};

board.addEventListener('scroll', updateImages);

board.addEventListener('touchmove', updateImages);

window.addEventListener('resize', updateImages);

hashList = function() {
  var id, _i, _len, _ref, _results;
  _ref = window.location.hash.substring(1).split('-');
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    id = _ref[_i];
    if (id) {
      _results.push(id);
    }
  }
  return _results;
};

hashToggle = function(id) {
  if (__indexOf.call(hashList(), id) >= 0) {
    return hashRemove(id);
  } else {
    return hashAppend(id);
  }
};

hashRemove = function(id) {
  return window.location.hash = hashList().filter(function(a) {
    return a !== id;
  }).join('-');
};

hashAppend = function(id) {
  if (__indexOf.call(hashList(), id) < 0) {
    return window.location.hash = hashList().concat(id).sort(function(a, b) {
      return parseInt(a, 16) - parseInt(b, 16);
    }).join('-');
  }
};

hashLoad = function(ids) {
  return window.location.hash = ids.sort(function(a, b) {
    return parseInt(a, 16) - parseInt(b, 16);
  }).join('-');
};

if ((localStorage['hash'] != null) && !hashList().length) {
  window.location.hash = localStorage['hash'];
}

app = angular.module('aboard', []);

app.filter('mature', function() {
  return function(tags) {
    if (__indexOf.call(tags.split(' '), 'mature') >= 0) {
      return '*';
    } else {
      return '';
    }
  };
});

app.filter('hashList', function() {
  return function(feeds) {
    var feed, _i, _len, _ref, _results;
    _results = [];
    for (_i = 0, _len = feeds.length; _i < _len; _i++) {
      feed = feeds[_i];
      if (_ref = feed.id, __indexOf.call(hashList(), _ref) >= 0) {
        _results.push(feed);
      }
    }
    return _results;
  };
});

app.filter('inHashList', function() {
  return function(id) {
    return __indexOf.call(hashList(), id) >= 0;
  };
});

app.controller('main', [
  '$scope', '$http', '$compile', function($scope, $http, $compile) {
    var http;
    $scope.feeds = [];
    $scope.items = [];
    $scope.current = false;
    http = $http.jsonp('http://spreadsheets.google.com/feeds/list/0AnqTdoRZw_IRdHctX2RyQncwRVA0eWZsSERsdUxOT0E/od6/public/basic?alt=json-in-script&callback=JSON_CALLBACK');
    http.success(function(data) {
      var feed;
      $scope.feeds = ((function() {
        var _i, _len, _ref, _results;
        _ref = data.feed.entry;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          feed = _ref[_i];
          _results.push(JSON.parse('{"id":"' + feed.title['$t'] + '", ' + (feed.content['$t'].replace(/([a-z]+)[\s]*\:[\s]*([^,]+)/g, '"$1":"$2"')) + '}'));
        }
        return _results;
      })()).filter(function(feed) {
        return feed.online !== "0";
      });
      if (hashList().length) {
        return $scope.loadItems();
      } else {
        return hashLoad((function() {
          var _i, _len, _ref, _results;
          _ref = $scope.feeds;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            feed = _ref[_i];
            if (feed.status === "1") {
              _results.push(feed.id);
            }
          }
          return _results;
        })());
      }
    });
    $scope.loadFeed = function(id) {
      var feed, item;
      feed = ((function() {
        var _i, _len, _ref, _results;
        _ref = $scope.feeds;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item.id === id) {
            _results.push(item);
          }
        }
        return _results;
      })()).pop();
      http = $http.jsonp('https://ajax.googleapis.com/ajax/services/feed/load?v=2.0&callback=JSON_CALLBACK&num=100&q=' + (encodeURIComponent(feed.feed)));
      http.error(function() {
        return hashRemove(feed.id);
      });
      return http.success(function(data) {
        var images, _i, _len, _ref;
        _ref = data.responseData.feed.entries;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          $scope.items.push({
            feed: feed.id,
            source: feed.url.replace(/^http(?:s)?\:\/\/([^\/]+)\/*$/, '$1'),
            title: item.title,
            author: item.author,
            date: new Date(item.publishedDate),
            url: item.link,
            image: (images = item.content.match(/<img[^<>]+src=[\"\']([^\"\']+)[\"\'][^<>]*>/)) ? images[1] : false
          });
        }
        $scope.items = $scope.items.filter(function(item) {
          return item.image;
        });
        return $scope.setCurrent($scope.current);
      });
    };
    $scope.loadItems = function() {
      var id, item, _i, _len, _ref;
      $scope.items = $scope.items.filter(function(item) {
        var _ref;
        return _ref = item.feed, __indexOf.call(hashList(), _ref) >= 0;
      });
      _ref = hashList();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i];
        if (__indexOf.call((function() {
          var _j, _len1, _ref1, _results;
          _ref1 = $scope.items;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            item = _ref1[_j];
            _results.push(item.feed);
          }
          return _results;
        })(), id) < 0) {
          $scope.loadFeed(id);
        }
      }
      if (!$scope.$$phase) {
        return $scope.$apply();
      }
    };
    $scope.resetCurrent = function() {
      return $scope.setCurrent(false);
    };
    $scope.setCurrent = function(id) {
      var item, list, _ref;
      $scope.current = id;
      _ref = [document.querySelector('#feed-' + id), document.querySelector('.nav-feeds')], item = _ref[0], list = _ref[1];
      if (item) {
        list.scrollLeft = item.offsetLeft - list.offsetLeft - list.offsetWidth / 2 + item.offsetWidth / 2;
      }
      board.scrollTop = 0;
      updateImages();
      if (!$scope.$$phase) {
        return $scope.$apply();
      }
    };
    window.addEventListener('hashchange', function() {
      localStorage['hash'] = window.location.hash.substring(1);
      $scope.loadItems();
      if (!$scope.$$phase) {
        return $scope.$apply();
      }
    });
    return window.addEventListener('keydown', function(e) {
      var target;
      switch (e.which) {
        case 37:
          target = $scope.current ? document.querySelector('#feed-' + $scope.current).previousSibling : document.querySelector('.nav-feed:last-child');
          break;
        case 39:
          target = $scope.current ? document.querySelector('#feed-' + $scope.current).nextSibling : document.querySelector('.nav-feed:first-child');
      }
      if (target) {
        if (target.getAttribute) {
          return $scope.setCurrent(target.getAttribute('id').replace('feed-', ''));
        } else {
          return $scope.resetCurrent();
        }
      }
    });
  }
]);

app.controller('feed', [
  '$scope', '$http', function($scope, $http) {
    $scope.showItems = function() {
      return $scope.setCurrent($scope.feed.id);
    };
    return $scope.toggleFeed = function() {
      var _ref;
      hashToggle($scope.feed.id);
      return $scope.setCurrent((_ref = $scope.feed.id, __indexOf.call(hashList(), _ref) >= 0) ? $scope.feed.id : false);
    };
  }
]);

(function() {
  var boat, logo, t, token, wave;
  logo = document.getElementById('logo');
  wave = document.getElementById('wave');
  boat = document.getElementById('boat');
  t = 0;
  token = false;
  logo.addEventListener('mouseout', function() {
    return clearInterval(token);
  });
  return logo.addEventListener('mouseover', function() {
    var shift, speed;
    speed = 1000 / 24;
    shift = 4;
    return token = setInterval((function() {
      var x;
      x = shift * Math.sin(t * Math.PI * speed / 1000 / 2);
      wave.setAttribute('transform', 'translate(-' + x + ')');
      boat.setAttribute('transform', 'translate(' + x + ')');
      return t++;
    }), speed);
  });
})();
